#!/usr/bin/env python3
import os
from dotenv import load_dotenv
import vertexai
from vertexai.preview.generative_models import GenerativeModel
from google.api_core.exceptions import NotFound, PermissionDenied

def main():
    # 1) Charge le .env (contenant GOOGLE_APPLICATION_CREDENTIALS, PROJECT_ID, LOCATION)
    load_dotenv()
    
    # 2) R√©cup√®re les variables
    cred_path = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")
    project_id = os.getenv("PROJECT_ID")
    location   = os.getenv("LOCATION")
    
    print(f"üîê Credentials : {cred_path}")
    print(f"üì¶ Project ID  : {project_id}")
    print(f"üåê R√©gion     : {location}")
    
    if not all([cred_path, project_id, location]):
        print("‚ùå V√©rifie que toutes les variables d'env sont d√©finies dans ton .env")
        return

    # 3) Initialise Vertex AI
    try:
        vertexai.init(project=project_id, location=location)
        print("‚úÖ Vertex AI initialis√©")
    except Exception as e:
        print("‚ùå Erreur lors de l'initialisation de Vertex AI :", e)
        return

    # 4) Tente de charger un mod√®le disponible dans la r√©gion
    #    Adapte ici le nom du mod√®le si besoin (europe-west1 ‚Üí gemini-2.0-flash-001, global/us-central1 ‚Üí gemini-2.5-pro-preview-05-06)
    model_name = "gemini-2.0-flash-001"
    try:
        model = GenerativeModel(model_name)
        print(f"‚úÖ Mod√®le {model_name} charg√©")
    except NotFound:
        print(f"‚ùå Mod√®le {model_name} introuvable dans la r√©gion {location}")
        return
    except PermissionDenied:
        print("‚ùå Acc√®s refus√© : v√©rifie les permissions du service account")
        return
    except Exception as e:
        print("‚ùå Erreur lors du chargement du mod√®le :", e)
        return

    # 5) Envoie une requ√™te test
    try:
        response = model.generate_content("Tell me a joke")
        # Selon version de la lib, soit response.text, soit response.candidates[0].content.text
        joke = getattr(response, "text", None) or response.candidates[0].content.text
        print("ü§ñ Blague g√©n√©r√©e :", joke)
    except Exception as e:
        print("‚ùå Erreur lors de l'appel au mod√®le :", e)

if __name__ == "__main__":
    main()
